// File generated by dotnet-combine at 2023-05-27__01_27_45

using System;




public class PerformAction
{
    // WAIT | LINE <sourceIdx> <targetIdx> <strength> | BEACON <cellIdx> <strength> | MESSAGE <text>
    public static void Wait()
    {
        Console.WriteLine("WAIT");
    }
        
    public static void Line(int sourceIdx, int targetIdx, int strength)
    {
        Console.WriteLine($"LINE {sourceIdx} {targetIdx} {strength}");
    }
        
    public static void Beacon(int cellIdx, int strength)
    {
        Console.WriteLine($"BEACON {cellIdx} {strength}");
    }
        
    public static void Message(string text)
    {
        Console.WriteLine($"MESSAGE {text}");
    }
}

// Player.cs
namespace CodinGame_Spring_Challenge_2023
{
    /**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
    internal static class Player
    {
        static void Main(string[] args)
        {
            string[] inputs;
            int numberOfCells = int.Parse(Console.ReadLine()); // amount of hexagonal cells in this map
            for (int i = 0; i < numberOfCells; i++)
            {
                inputs = Console.ReadLine().Split(' ');
                int type = int.Parse(inputs[0]); // 0 for empty, 1 for eggs, 2 for crystal
                int initialResources = int.Parse(inputs[1]); // the initial amount of eggs/crystals on this cell
                int neigh0 = int.Parse(inputs[2]); // the index of the neighbouring cell for each direction
                int neigh1 = int.Parse(inputs[3]);
                int neigh2 = int.Parse(inputs[4]);
                int neigh3 = int.Parse(inputs[5]);
                int neigh4 = int.Parse(inputs[6]);
                int neigh5 = int.Parse(inputs[7]);
            }
            int numberOfBases = int.Parse(Console.ReadLine());
            inputs = Console.ReadLine().Split(' ');
            for (int i = 0; i < numberOfBases; i++)
            {
                int myBaseIndex = int.Parse(inputs[i]);
            }
            inputs = Console.ReadLine().Split(' ');
            for (int i = 0; i < numberOfBases; i++)
            {
                int oppBaseIndex = int.Parse(inputs[i]);
            }

            // game looping
            while (true)
            {
                for (int i = 0; i < numberOfCells; i++)
                {
                    inputs = Console.ReadLine().Split(' ');
                    int resources = int.Parse(inputs[0]); // the current amount of eggs/crystals on this cell
                    int myAnts = int.Parse(inputs[1]); // the amount of your ants on this cell
                    int oppAnts = int.Parse(inputs[2]); // the amount of opponent ants on this cell
                }

                // Write an action us Console.WriteLine()
                // To debug: Console.Error.WriteLine("Debug messages...");
                PerformAction.Wait();
            }
        }
    }
}
